<?xml version="1.0"?>
<doc>
    <assembly>
        <name>E_Learning.WebAPI</name>
    </assembly>
    <members>
        <member name="T:E_Learning.WebAPI.Contracts.CommentContract">
            <summary>
            CommentContract class for creating a comment.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CommentContract.CourseId">
            <summary>
            Course id on which the comment was made.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CommentContract.UserId">
            <summary>
            User id of the commenter.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CommentContract.content">
            <summary>
            Content of the comment.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CommentContract.CreatedAt">
            <summary>
            Creation date and time of the comment.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CommentContract.UpdatedAt">
            <summary>
            Update date and time of the comment.
            </summary>
        </member>
        <member name="T:E_Learning.WebAPI.Contracts.CourseContentContract">
            <summary>
            Contains information about a course content.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseContentContract.CourseId">
            <summary>
            CourseId of the course this content belongs to.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseContentContract.Title">
            <summary>
            Get or set the title of the content.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseContentContract.Description">
            <summary>
            Get or set the description of the content.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseContentContract.ContentUrl">
            <summary>
            Get or set the content URL.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseContentContract.ContentType">
            <summary>
            Content type of the content(e.g., Video, Article, PDF, Quiz).
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseContentContract.Order">
            <summary>
            Get or set the order of the content in the course.
            </summary>
        </member>
        <member name="T:E_Learning.WebAPI.Contracts.CourseContract">
            <summary>
            Request DTO for creating a course.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseContract.Title">
            <summary>
            Title of the course.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseContract.Description">
            <summary>
            Description of the course content.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseContract.Level">
            <summary>
            Level of the course (e.g., Beginner, Intermediate, Advanced).
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseContract.Duration">
            <summary>
            Duration of the course (e.g., "5 hours").
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseContract.IsFree">
            <summary>
            Indicates whether the course is free.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseContract.Price">
            <summary>
            Price of the course (required if not free).
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseContract.CreatedAt">
            <summary>
            Date and time when the course was created.
            </summary>
        </member>
        <member name="T:E_Learning.WebAPI.Contracts.CourseRatingContract">
            <summary>
            Contact model for CourseRating.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseRatingContract.CourseId">
            <summary>
            Course id for which the rating was made.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseRatingContract.UserId">
            <summary>
            User id of the rating giver.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseRatingContract.Rating">
            <summary>
            Rating given by the user(e.g., 1-5, 1-star, 2-star, etc. 0 for no rating).
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseRatingContract.Review">
            <summary>
            Review given by the user(e.g., "Great course!", "Not bad" etc. 0 for no review).
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseRatingContract.CreatedAt">
            <summary>
            Creation date and time of the rating.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.CourseRatingContract.UpdatedAt">
            <summary>
            Update date and time of the rating.
            </summary>
        </member>
        <member name="T:E_Learning.WebAPI.Contracts.EnrollmentContract">
            <summary>
            EnrollmentContract class for creating an enrollment.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.EnrollmentContract.UserId">
            <summary>
            Id of the enrolled user.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.EnrollmentContract.CourseId">
            <summary>
            Id of the course the user is enrolled in.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.EnrollmentContract.EnrolledAt">
            <summary>
            The date and time the user enrolled in the course.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.EnrollmentContract.IsCompleted">
            <summary>
            Whether the user has completed the course or not.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.EnrollmentContract.Progress">
            <summary>
            The percentage of course progress (0 to 100).
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.EnrollmentContract.CompletedAt">
            <summary>
            The date and time the user completed the course.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.EnrollmentContract.CertificateUrl">
            <summary>
            The URL of the certificate the user obtained.
            </summary>
        </member>
        <member name="T:E_Learning.WebAPI.Contracts.UserContract">
            <summary>
            UserContract class for creating a user.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.UserContract.Email">
            <summary>
            Gets or sets the email of the user.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.UserContract.Password">
            <summary>
            Gets or sets the password of the user.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.UserContract.FullName">
            <summary>
            Gets or sets the full name of the user.
            </summary>
        </member>
        <member name="P:E_Learning.WebAPI.Contracts.UserContract.Role">
            <summary>
            Gets or sets the role of the user.
            </summary>
        </member>
        <member name="T:E_Learning.WebAPI.Controllers.CommentsController">
            <summary>
            Controller for managing comments.
            </summary>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CommentsController.#ctor(E_Learning.Services.Interfaces.ICommentService,AutoMapper.IMapper)">
            <summary>
            Controller for managing comments.
            </summary>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CommentsController.AddCommentAsync(System.Guid,E_Learning.WebAPI.Contracts.CommentContract)">
            <summary>
            Add a new comment to a course.
            </summary>
            <param name="courseId">The course id on which the comment is made.</param>
            <param name="contract">The contract containing the comment details.</param>
            <returns>The created comment if successful; otherwise, returns a BadRequest result with an error message.</returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CommentsController.GetCommentsByCourseIdAsync(System.Guid)">
            <summary>
            Get all comments made on a specific course.
            </summary>
            <param name="courseId">The unique identifier of the course for which to retrieve comments.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CommentsController.UpdateCommentAsync(System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{E_Learning.WebAPI.Contracts.CommentContract})">
            <summary>
            Update an existing comment.
            </summary>
            <param name="commentId">The unique identifier of the comment to update.</param>
            <param name="patchDocument"> The JSON patch document containing the updated properties.</param>
            <returns>Returns the updated comment if successful; otherwise, returns a NotFound result with an error message.</returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CommentsController.DeleteCommentAsync(System.Guid)">
            <summary>
            Deletes a specific comment.
            </summary>
            <param name="commentId">The unique identifier of the comment to delete.</param>
            <returns>Returns Ok if successful; otherwise, returns a NotFound result with an error message.</returns>
        </member>
        <member name="T:E_Learning.WebAPI.Controllers.CourseContentsController">
            <summary>
            CourseContentsController class handles requests related to course contents.
            </summary>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CourseContentsController.#ctor(E_Learning.Services.Interfaces.ICourseContentsService,AutoMapper.IMapper)">
            <summary>
            CourseContentsController class handles requests related to course contents.
            </summary>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CourseContentsController.CreateAsync(E_Learning.WebAPI.Contracts.CourseContentContract)">
            <summary>
            Creates a new course content for a specific course.
            </summary>
            <param name="contract">The contract containing the course content details to create.</param>
            <returns>
            An ActionResult containing the created course content if successful;
            otherwise, returns a BadRequest result with an error message.
            </returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CourseContentsController.GetCourseContentByIdAsync(System.Guid)">
            <summary>
            Retrieves a specific course content by its unique identifier.
            </summary>
            <param name="id">The unique identifier of the course content to retrieve.</param>
            <returns>
            An ActionResult containing the course content if found;
            otherwise, returns a NotFound result with an error message.
            </returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CourseContentsController.GetCourseContentsByCourseIdAsync(System.Guid)">
            <summary>
            Retrieves all course contents associated with a specific course.
            </summary>
            <param name="courseId">The unique identifier of the course for which to retrieve contents.</param>
            <returns>
            An ActionResult containing a list of course contents if found;
            otherwise, returns a NotFound result with an error message.
            </returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CourseContentsController.UpdateCourseContentAsync(System.Guid,E_Learning.WebAPI.Contracts.CourseContentContract)">
            <summary>
            Updates a specific course content by its unique identifier.
            </summary>
            <param name="id">The unique identifier of the course content to update.</param>
            <param name="contract">The contract containing the updated course content details.</param>
            <returns> The updated course content if successful; otherwise, returns a NotFound result with an error message. </returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CourseContentsController.PatchCourseContentAsync(System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{E_Learning.WebAPI.Contracts.CourseContentContract})">
            <summary>
            Partially updates a course content using JSON Patch.
            </summary>
            <param name="id">The unique identifier of the course content to patch.</param>
            <param name="patchDoc">A JSON Patch document containing the updates to apply to the course content.</param>
            <returns> The updated course content if successful; otherwise, returns a NotFound result with an error message. </returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CourseContentsController.DeleteAsync(System.Guid)">
            <summary>
            Deletes a specific course content by its unique identifier.
            </summary>
            <param name="id">The unique identifier of the course content to delete.</param>
            <returns>
            An IActionResult representing the result of the delete operation:
            - If the content is successfully deleted, returns an Ok result with a success message.
            - If the content is not found, returns a NotFound result with an error message.
            </returns>
        </member>
        <member name="T:E_Learning.WebAPI.Controllers.CourseRatingsController">
            <summary>
            Controller for managing course ratings.
            </summary>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CourseRatingsController.#ctor(E_Learning.Services.Interfaces.ICourseRatingsService,AutoMapper.IMapper)">
            <summary>
            Controller for managing course ratings.
            </summary>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CourseRatingsController.AddOrUpdateRatingAsync(System.Guid,E_Learning.WebAPI.Contracts.CourseRatingContract)">
            <summary>
            Add or update a course rating.
            </summary>
            <param name="courseId">The course id for which the rating was made.</param>
            <param name="contract">The course rating data from the service layer.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CourseRatingsController.GetRatingsByCourseAsync(System.Guid)">
            <summary>
            Get all course ratings associated with a specific course.
            </summary>
            <param name="courseId">The unique identifier of the course for which to retrieve ratings.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CourseRatingsController.DeleteRatingAsync(System.Guid)">
            <summary>
            Delete a specific course rating by course and user.
            </summary>
            <param name="ratingId">The unique identifier of the rating to delete.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:E_Learning.WebAPI.Controllers.CoursesController">
            <summary>
            Controller for managing Courses.
            </summary>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CoursesController.#ctor(E_Learning.Services.Interfaces.ICoursesService,AutoMapper.IMapper)">
            <summary>
            Controller for managing Courses.
            </summary>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CoursesController.CreateCourses(E_Learning.WebAPI.Contracts.CourseContract)">
            <summary>
            Create a new Coursess by the logged-in instructor.
            </summary>
            <param name="request">The CourseContract object containing the course details.</param>
            <returns>Returns an IActionResult representing the result of the course creation process.</returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CoursesController.GetCoursesById(System.Guid)">
            <summary>
            Retrieves a specific course by its unique identifier.
            </summary>
            <param name="courserId">The unique identifier (GUID) of the course to retrieve.</param>
            <returns>
            An ActionResult containing the CourseContract for the specified course.
            Returns an OK (200) status with the course data if found, or a NotFound (404) status if the course doesn't exist.
            </returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CoursesController.GetAllCourses">
            <summary>
            Retrieves all courses from the system.
            </summary>
            <returns>
            An ActionResult containing a list of CourseContract objects.
            Returns an OK (200) status with the list of courses if successful.
            </returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CoursesController.PatchCourses(System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{E_Learning.WebAPI.Contracts.CourseContract})">
            <summary>
            Partially updates a course using JSON Patch.
            </summary>
            <param name="courseId">The unique identifier of the course to update.</param>
            <param name="pathDoc">A JSON Patch document containing the updates to apply to the course.</param>
            <returns>
            An IActionResult representing the result of the operation:
            - 200 OK if the course was successfully updated.
            - 400 Bad Request if the patch document is null, no valid updatable fields were provided, or some fields cannot be updated.
            - 404 Not Found if the course with the specified ID does not exist.
            </returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.CoursesController.DeleteCourse(System.Guid)">
            <summary>
            Deletes a specific course from the system.
            </summary>
            <param name="courseId">The unique identifier (GUID) of the course to be deleted.</param>
            <returns>
            An IActionResult representing the result of the delete operation:
            - 200 OK with a success message if the course was successfully deleted.
            - 404 Not Found with an error message if the course with the specified ID does not exist.
            </returns>
        </member>
        <member name="T:E_Learning.WebAPI.Controllers.EnrollmentsController">
            <summary>
            Controller for managing Enrollments.
            </summary>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.EnrollmentsController.#ctor(E_Learning.Services.Interfaces.IEnrollmentsService,AutoMapper.IMapper)">
            <summary>
            Controller for managing Enrollments.
            </summary>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.EnrollmentsController.CreateAsync(E_Learning.WebAPI.Contracts.EnrollmentContract)">
            <summary>
            Enrolls a user in a course.
            </summary>
            <param name="contract">The contract containing the user and course details for enrollment.</param>
            <returns>The created enrollment if successful; otherwise, returns a BadRequest result with an error message.</returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.EnrollmentsController.GetByIdAsync(System.Guid)">
            <summary>
            Gets an enrollment by its unique identifier.
            </summary>
            <param name="id">The unique identifier of the enrollment to retrieve.</param>
            <returns>The enrollment if found; otherwise, returns a NotFound result with an error message.</returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.EnrollmentsController.GetByUserIdAsync(System.String)">
            <summary>
            Gets all enrollments for a specific user.
            </summary>
            <param name="userId">The unique identifier of the user.</param>
            <returns>A collection of enrollment models.</returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.EnrollmentsController.UpdateAsync(System.Guid,E_Learning.WebAPI.Contracts.EnrollmentContract)">
            <summary>
            Updates an existing enrollment.
            </summary>
            <param name="id">The unique identifier of the enrollment to update.</param>
            <param name="contract">The updated enrollment contract.</param>
            <returns>Returns the updated enrollment if successful; otherwise, returns a NotFound result with an error message.</returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.EnrollmentsController.PatchAsync(System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{E_Learning.WebAPI.Contracts.EnrollmentContract})">
            <summary>
            Partially updates an existing enrollment.
            </summary>
            <param name="id">The unique identifier of the enrollment to update.</param>
            <param name="patchDoc">The JSON patch document containing the updated properties.</param>
            <returns>Returns the updated enrollment if successful; otherwise, returns a NotFound result with an error message.</returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.EnrollmentsController.DeleteAsync(System.Guid)">
            <summary>
            Deletes an enrollment by its unique identifier.
            </summary>
            <param name="id">The unique identifier of the enrollment to delete.</param>
            <returns>returns a NotFound result if the enrollment is not found; otherwise, returns an Ok result with a success message.</returns>
        </member>
        <member name="T:E_Learning.WebAPI.Controllers.UsersController">
            <summary>
            UsersController class handles all user-related operations such as registration, login, profile updates,
            fetching users, and deletion. It communicates with the UsersService to perform business logic.
            </summary>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.UsersController.#ctor(E_Learning.Services.Interface.IUsersService,AutoMapper.IMapper)">
            <summary>
            UsersController class handles all user-related operations such as registration, login, profile updates,
            fetching users, and deletion. It communicates with the UsersService to perform business logic.
            </summary>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.UsersController.Register(E_Learning.WebAPI.Contracts.UserContract)">
            <summary>
            Registers a new user with the provided user contract.
            </summary>
            <param name="contract">The UserContract object containing the user's registration details.</param>
            <returns>
            An IActionResult representing the result of the registration process.
            Returns a BadRequest with errors if registration fails, or an Ok result with a success message if registration succeeds.
            </returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.UsersController.Login(E_Learning.WebAPI.Contracts.UserContract)">
            <summary>
            Authenticates the user and returns a JWT token if credentials are valid.
            </summary>
            <param name="contract">The login request containing email and password.</param>
            <returns>
            Returns a 200 OK with a JWT token if login is successful;  
            otherwise, returns 401 Unauthorized with an error message.
            </returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.UsersController.GetUserById(System.String)">
            <summary>
            Retrieves a user by their unique identifier.
            </summary>
            <param name="userId">The unique identifier of the user to retrieve.</param>
            <returns>
            An ActionResult representing the result of the user retrieval process.
            Returns a NotFound result if the user is not found, or an Ok result with the user's details if the user is found.
            </returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.UsersController.GetAllUsers">
            <summary>
            Retrieves all users from the system. This endpoint is restricted to Admin roles only.
            </summary>
            <returns>
            An ActionResult containing a list of <see cref="T:E_Learning.WebAPI.Contracts.UserContract"/> objects representing all users,
            or an error response if retrieval fails.
            </returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.UsersController.PatchUser(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{E_Learning.WebAPI.Contracts.UserContract})">
            <summary>
            Partially updates a user using JSON Patch.
            </summary>
            <param name="userId">User ID to update.</param>
            <param name="patchDoc">Patch operations on the user.</param>
            <returns>Updated user or error.</returns>
        </member>
        <member name="M:E_Learning.WebAPI.Controllers.UsersController.DeleteUserById(System.String)">
            <summary>
            Deletes a user by their unique identifier. This endpoint is restricted to Admin roles only.
            </summary>
            <param name="userId">The unique identifier of the user to delete.</param>
            <returns>
            An IActionResult with:
            - 200 OK and success message if deletion succeeds
            - 404 Not Found if user doesn't exist
            - 400 Bad Request with errors if deletion fails
            </returns>
        </member>
        <member name="T:E_Learning.WebAPI.Mapping.AutoMapperProfile">
            <summary>
            AutoMapper profile that scans all loaded assemblies for types implementing <see cref="T:E_Learning.Extensions.Mappings.IMapFrom`1"/>
            and automatically creates mapping configurations for them.
            </summary>
        </member>
        <member name="M:E_Learning.WebAPI.Mapping.AutoMapperProfile.#ctor">
            <summary>
            Initializes a new instanse of the <see cref="T:E_Learning.WebAPI.Mapping.AutoMapperProfile"/> class
            and applies mappings from all loaded assemblies in the current application domain. 
            </summary>
        </member>
        <member name="M:E_Learning.WebAPI.Mapping.AutoMapperProfile.ApplyMappingsFromAssembly(System.Reflection.Assembly)">
            <summary>
            Applies mappings from the given assembly by looking for types implementing <see cref="T:E_Learning.Extensions.Mappings.IMapFrom`1"/>
            Automatically create bi-directional mappings with null-value skipping.
            </summary>
            <param name="assembly">The assembly to scan for mapping configurations.</param>
        </member>
        <member name="T:E_Learning.WebAPI.Middlewares.ExceptionMiddleware">
            <summary>
            Middleware for globally handling unhandled exceptions in the application.
            Logs the error and returns a JSON-formatted error response with appropriate status codes.
            </summary>
        </member>
        <member name="M:E_Learning.WebAPI.Middlewares.ExceptionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{E_Learning.WebAPI.Middlewares.ExceptionMiddleware})">
            <summary>
            Initializes a new instance of the <see cref="T:E_Learning.WebAPI.Middlewares.ExceptionMiddleware"/> class.
            </summary>
            <param name="next">The next middleware in the request pipeline.</param>
            <param name="logger">Logger for recording exception details.</param>
        </member>
        <member name="M:E_Learning.WebAPI.Middlewares.ExceptionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the middleware to catch and handle exceptions that occur during request processing.
            </summary>
            <param name="context">The current HTTP context.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:E_Learning.WebAPI.Validators.CourseContentValidator">
            <summary>
            Validator for <see cref="T:E_Learning.WebAPI.Contracts.CourseContentContract"/> using FluentValidation.
            </summary>
        </member>
        <member name="M:E_Learning.WebAPI.Validators.CourseContentValidator.#ctor">
            Initializes a new instance of the <see cref="T:E_Learning.WebAPI.Validators.CourseContentValidator"/> class.
        </member>
        <member name="T:E_Learning.WebAPI.Validators.CourseContractValidator">
            <summary>
            Validator for <see cref="T:E_Learning.WebAPI.Contracts.CourseContract"/> using FluentValidation.
            Ensures required fields like Title, Description, Level, and Price are properly validated.
            </summary>
        </member>
        <member name="M:E_Learning.WebAPI.Validators.CourseContractValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:E_Learning.WebAPI.Validators.CourseContractValidator"/> class.
            Sets up validation rules for creating or updating a course.
            </summary>
        </member>
        <member name="T:E_Learning.WebAPI.Validators.UserContractValidator">
            Ensures required fields like Email, Password, and FullName meet validation rules.
        </member>
        <member name="M:E_Learning.WebAPI.Validators.UserContractValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:E_Learning.WebAPI.Validators.UserContractValidator"/> class.
            Sets up validation rules for Email, Password, and FullName.
            </summary>
        </member>
    </members>
</doc>
